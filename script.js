const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const menu = document.getElementById("menu");
const gameOverMenu = document.getElementById("gameOver");
const winMenu = document.createElement("div");

winMenu.classList.add("menu", "hidden");
winMenu.innerHTML = `<h2>–ü–æ–±–µ–¥–∞! –ù—É —Ç—ã –∏ –ª–æ—Ö üòÇ</h2><button onclick="restartGame()" style="font-size: 14px; padding: 5px 10px;">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>`;
document.body.appendChild(winMenu);

// –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let player, bonuses, mobs, shields, level, isGameOver, lives;
let keys = {};
let touchActive = false;
let touchX = null, touchY = null; // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Å–∞–Ω–∏—è

const MAX_LEVEL = 10;

// –î–∂–æ–π—Å—Ç–∏–∫ (—É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 35%)
const joystick = {
    x: canvas.width / 2, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    y: canvas.height - 150, // –û–ø—É—Å–∫–∞–µ–º –¥–∂–æ–π—Å—Ç–∏–∫ —á—É—Ç—å –≤—ã—à–µ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    radius: 27, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π —Ä–∞–¥–∏—É—Å –¥–∂–æ–π—Å—Ç–∏–∫–∞ –Ω–∞ 35%
    innerRadius: 16, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å –¥–∂–æ–π—Å—Ç–∏–∫–∞ –Ω–∞ 35%
    touchX: null,
    touchY: null,
    isMoving: false
};

// –≠–∫—Ä–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã
const rulesScreen = document.createElement("div");
rulesScreen.classList.add("menu");
rulesScreen.innerHTML = `
    <h2>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</h2>
    <p>–°–∏–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ ‚Äî —ç—Ç–æ —Ç—ã</p>
    <p>–°–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç ‚Äî —ç—Ç–æ —â–∏—Ç</p>
    <p>–ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç ‚Äî —ç—Ç–æ –≤—Ä–∞–≥</p>
    <p>–£ —Ç–µ–±—è –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏</p>
    <p>–í –∏–≥—Ä–µ 10 —É—Ä–æ–≤–Ω–µ–π</p>
`;
document.body.appendChild(rulesScreen);

function startGame() {
    rulesScreen.classList.add("hidden"); // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    menu.classList.add("hidden");
    canvas.classList.remove("hidden");
    gameOverMenu.classList.add("hidden");
    winMenu.classList.add("hidden");

    level = 1;
    lives = 3;
    isGameOver = false;

    // –£–≤–µ–ª–∏—á–∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ 60%
    player = { x: canvas.width / 2, y: canvas.height / 2, size: 30, speed: 9, shield: false }; // 7.84 * 1.6
    bonuses = [];
    mobs = [];
    shields = [];

    generateBonuses();
    generateMobs();
    generateShields();
    gameLoop();
}

function restartGame() {
    startGame();
}

function generateBonuses() {
    bonuses = [];
    for (let i = 0; i < level * 2; i++) {
        bonuses.push({
            x: Math.random() * (canvas.width - 20),
            y: Math.random() * (canvas.height - 20),
            size: 20
        });
    }
}

function generateMobs() {
    mobs = [];
    for (let i = 0; i < level; i++) {
        mobs.push({
            x: Math.random() * (canvas.width - 20),
            y: Math.random() * (canvas.height - 20),
            size: 30,
            speedX: (Math.random() - 0.5) * 10, // –£—Å–∫–æ—Ä–∏–º –º–æ–±–æ–≤
            speedY: (Math.random() - 0.5) * 10
        });
    }
}

function generateShields() {
    shields = [];
    for (let i = 0; i < 1; i++) {
        shields.push({
            x: Math.random() * (canvas.width - 20),
            y: Math.random() * (canvas.height - 20),
            size: 30
        });
    }
}

function gameLoop() {
    if (isGameOver) return;

    movePlayer();

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞
    ctx.fillStyle = player.shield ? "cyan" : "blue";
    ctx.fillRect(player.x, player.y, player.size, player.size);

    // –†–∏—Å—É–µ–º –±–æ–Ω—É—Å—ã
    bonuses.forEach((bonus, index) => {
        ctx.fillStyle = "green";
        ctx.fillRect(bonus.x, bonus.y, bonus.size, bonus.size);

        if (isColliding(player, bonus)) {
            bonuses.splice(index, 1);
        }
    });

    // –†–∏—Å—É–µ–º —â–∏—Ç—ã
    shields.forEach((shield, index) => {
        ctx.fillStyle = "blue";
        ctx.fillRect(shield.x, shield.y, shield.size, shield.size);

        if (isColliding(player, shield)) {
            player.shield = true;
            shields.splice(index, 1);
        }
    });

    // –î–≤–∏–≥–∞–µ–º –º–æ–±–æ–≤ –∏ —Ä–∏—Å—É–µ–º –∏—Ö
    mobs.forEach((mob, index) => {
        mob.x += mob.speedX;
        mob.y += mob.speedY;

        if (mob.x < 0 || mob.x + mob.size > canvas.width) mob.speedX *= -1;
        if (mob.y < 0 || mob.y + mob.size > canvas.height) mob.speedY *= -1;

        ctx.fillStyle = "red";
        ctx.fillRect(mob.x, mob.y, mob.size, mob.size);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –º–æ–±–æ–º
        if (isColliding(player, mob)) {
            if (player.shield) {
                player.shield = false;
            } else {
                lives--;
                if (lives <= 0) {
                    gameOver();
                    return;
                }
            }
            mobs.splice(index, 1);
        }
    });

    // –ï—Å–ª–∏ –≤—Å–µ –±–æ–Ω—É—Å—ã —Å–æ–±—Ä–∞–Ω—ã
    if (bonuses.length === 0) {
        if (level === MAX_LEVEL) {
            winGame();
            return;
        }
        level++;
        generateBonuses();
        generateMobs();
        generateShields();
    }

    drawLives();
    drawLevel();
    drawJoystick();
    requestAnimationFrame(gameLoop);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
function isColliding(a, b) {
    return (
        a.x < b.x + b.size &&
        a.x + a.size > b.x &&
        a.y < b.y + b.size &&
        a.y + a.size > b.y
    );
}

// –†–∏—Å—É–µ–º –∂–∏–∑–Ω–∏
function drawLives() {
    ctx.fillStyle = "black";
    ctx.font = "20px Arial";
    ctx.fillText("–ñ–∏–∑–Ω–∏: " + lives, 10, 20);
}

// –†–∏—Å—É–µ–º —É—Ä–æ–≤–µ–Ω—å
function drawLevel() {
    ctx.fillStyle = "black";
    ctx.font = "20px Arial";
    ctx.fillText("–£—Ä–æ–≤–µ–Ω—å: " + level, canvas.width - 120, 20);
}

// –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é –¥–∂–æ–π—Å—Ç–∏–∫–∞
function movePlayer() {
    if (joystick.isMoving && joystick.touchX !== null && joystick.touchY !== null) {
        let dx = joystick.touchX - joystick.x;
        let dy = joystick.touchY - joystick.y;
        let length = Math.sqrt(dx * dx + dy * dy);

        if (length > joystick.innerRadius) {
            dx = (dx / length) * joystick.innerRadius;
            dy = (dy / length) * joystick.innerRadius;
        }

        // –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥–∂–æ–π—Å—Ç–∏–∫–∞
        player.x += dx / 8;  // –£–º–µ–Ω—å—à–∏–ª –Ω–∞ 2 (–¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏)
        player.y += dy / 8;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
    if (player.x < 0) player.x = 0;
    if (player.y < 0) player.y = 0;
    if (player.x + player.size > canvas.width) player.x = canvas.width - player.size;
    if (player.y + player.size > canvas.height) player.y = canvas.height - player.size;
}

// –†–∏—Å—É–µ–º –¥–∂–æ–π—Å—Ç–∏–∫
function drawJoystick() {
    ctx.beginPath();
    ctx.arc(joystick.x, joystick.y, joystick.radius, 0, Math.PI * 2);
    ctx.fillStyle = "rgba(0, 0, 0, 0.3)";
    ctx.fill();

    if (joystick.isMoving) {
        ctx.beginPath();
        ctx.arc(joystick.touchX, joystick.touchY, joystick.innerRadius, 0, Math.PI * 2);
        ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
        ctx.fill();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
canvas.addEventListener("touchstart", (event) => {
    const touch = event.touches[0];
    const dist = Math.sqrt(Math.pow(touch.clientX - joystick.x, 2) + Math.pow(touch.clientY - joystick.y, 2));

    if (dist <= joystick.radius) {
        joystick.touchX = touch.clientX;
        joystick.touchY = touch.clientY;
        joystick.isMoving = true;
    }
});

canvas.addEventListener("touchmove", (event) => {
    if (joystick.isMoving) {
        const touch = event.touches[0];
        joystick.touchX = touch.clientX;
        joystick.touchY = touch.clientY;
    }
});

canvas.addEventListener("touchend", () => {
    joystick.isMoving = false;
});

// –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener("keydown", (event) => keys[event.key] = true);
document.addEventListener("keyup", (event) => keys[event.key] = false);

function gameOver() {
    isGameOver = true;
    gameOverMenu.classList.remove("hidden");
    canvas.classList.add("hidden");
}

function winGame() {
    isGameOver = true;
    winMenu.classList.remove("hidden");
    canvas.classList.add("hidden");
}
